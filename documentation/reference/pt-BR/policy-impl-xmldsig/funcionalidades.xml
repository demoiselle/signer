<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="policy-impl-xmldsig-funcionalidades">

    <title id="title-policy-impl-xmldsig-funcionalidades">Funcionalidades</title>
    <para>
        Este componente provê mecanismos de assinatura digital baseado na especificação W3C XML Signature Syntax and Processing Version 1.1.
    </para>
    <para>
    O padrão <ulink url="https://www.w3.org/TR/xmldsig-core/">xmldsig</ulink> define o formato para assinatura.
    </para>      
    <para>     
        A interface <literal>org.demoiselle.signer.policy.impl.xmldsig.xml.Signer</literal>
        provê as funcionalidades de Assinatura.
    </para>
    
    <para>     
        Para as funções de VALIDAÇÃO temos a interface <literal>org.demoiselle.signer.policy.impl.xmldsig.xml.Checker</literal>
    </para>

    <para>
        Este componente, até a presente versão, apenas assina no formato Enveloped (A Assinatura passa ser parte do documento). 
    </para>

   
    <section id="policy-impl-xmldsig-funcionalidades-assinar-enveloped">
        <title>Assinatura Enveloped</title>
        <para>
            Para Assinar em XML Enveloped, a entrada deve ser um arquivo em formato XML.
        </para>
        <para>
        <itemizedlist>            
           	    <listitem>
                    <para>
                        <emphasis>Como entrada pode ser informado</emphasis>
                    </para>
                    <para>
                        <segmentedlist>
                            <seglistitem>Local do arquivo no sistema de arquivos</seglistitem>
                            <seglistitem>String que representa o arquivo XML</seglistitem>
                            <seglistitem>Um objeto da classe org.w3c.dom.Document</seglistitem>
                            <seglistitem>InputStream</seglistitem>
                            <seglistitem>ByteArray</seglistitem>
                        </segmentedlist>
                    </para>
                 </listitem>
            </itemizedlist>
        </para>

        <para>
            A seguir temos um fragmento de código que demonstra a utilização do componente nesta funcionalidade
        </para>

        <programlisting role="JAVA"><![CDATA[
        	Keystore ks = getKeyStoreTokenBySigner();
     		File newFile = new File("caminho para o arquivo");
			String alias = getAlias(ks);
			Signer xmlSigner = new XMLDsigSigner();

			// para A3
			xmlSigner.setPrivateKey((PrivateKey) ks.getKey(alias, null));

			// para A1
			// quando certificado em arquivo, precisa informar a senha
			// char[] senha = "senha".toCharArray();
			// xmlSigner.setPrivateKey((PrivateKey) ks.getKey(alias, senha));

			xmlSigner.setCertificateChain(ks.getCertificateChain(alias));
			// o parâmentro true é para diferenciar do método que recebe uma String contendo um XML
			Document doc = xmlSigner.signEnveloped(true, newFile.getPath());
 
]]></programlisting>

    </section>

    <section id="policy-impl-xmldsig-funcionalidades-validar">

        <title>
            Validação de assinatura XML - Enveloped
        </title>

        <para>
      		A validação de uma Assinatura em XML consiste em enviar ao componente o arquivo XML que contém a Assinatura.
        </para>
        <para>
        <itemizedlist>            
           	    <listitem>
                    <para>
                        <emphasis>Como entrada pode ser informado</emphasis>
                    </para>
                    <para>
                        <segmentedlist>
                            <seglistitem>Local do arquivo no sistema de arquivos</seglistitem>
                            <seglistitem>String que representa o arquivo XML</seglistitem>
                            <seglistitem>Um objeto da classe org.w3c.dom.Document</seglistitem>
                            <seglistitem>InputStream</seglistitem>
                            <seglistitem>ByteArray</seglistitem>
                        </segmentedlist>
                    </para>
                 </listitem>
            </itemizedlist>
        </para>
        
         <para>
            A seguir temos um fragmento de código que demonstra a utilização do componente nesta funcionalidade
        </para>
        

		<programlisting role="JAVA"><![CDATA[
			File newFile = new File("caminho para o arquivo");
			Checker checker = new XMLDsigChecker();
			checker.check(true, newFile.getPath());
			List<XMLSignatureInformations> results = new ArrayList<XMLSignatureInformations>();
			results = checker.getSignaturesInfo();
]]></programlisting>

	<para>
	 O retorno é um objeto do tipo org.demoiselle.signer.policy.impl.xmldsig.XMLSignatureInformations que possui os seguintes atributos
	 </para>
	 <programlisting role="JAVA"><![CDATA[
public class SignatureInformations {

	private LinkedList<X509Certificate> chain; // cadeia do certificado que gerou a assinatura 
	private Date signDate;  // data do equipamento no momento da geração das assinatura (não tem validade legal)
   	private Date notAfter; // data de vencimento do certificado que produziu a assinatura
	private LinkedList<String> validatorWarnins = new LinkedList<String>(); // Lista de avisos que por ventura possam ter sido encontrados na validação da assinatura
	private LinkedList<String> validatorErrors = new LinkedList<String>();  // Lista de erros que por ventura possam ter sido encontrados na validação da assinatura
	private boolean invalidSignature = false; // Se a assinatura é válida
	private BasicCertificate icpBrasilcertificate = null; // Class que representa o certificado no padrão ICP-Brasil que produziu a Assinatura
   	
   	]]></programlisting>
   	
   	
    </section>

<section id="policy-impl-xmldsig-funcionalidades-resultados-validacao">
        <title>
            Tratando os resultados da validação
        </title>
        <para>
        	Como é possível que um mesmo arquivo possa contar várias assinaturas, só será gerada exceção quando a assinatura ou o arquivo estiverem comprometidos
        	Nos demais casos, o Demoiselle-Signer irá devolver o resultado numa lista de objetos XMLSignatureInformations.
        	Essa classe contém os seguintes atributos:
       	
        	<para> 
        	<itemizedlist>
        		<listitem> <para> chain;</para> <para> Lista X509Certificate com a cadeia completa do certificado do Assinante</para>
        		</listitem>
        		<listitem> <para> signDate</para> <para>A data do equipamento onde foi gerada a assinatura, e serve apenas como referência, não tem nenhuma validade legal</para>
        		</listitem>
        		<listitem> <para> notAfter;</para> <para>A data de validade do Certificado do Assinante</para>
        		</listitem>
        		<listitem> <para> validatorWarnins </para> <para>Lista de Avisos.</para>
        		</listitem>
        		<listitem> <para>validatorErrors </para> <para> Lista de Erros. A assinatura pode estar correta mas não foi possível verificar alguma condição de validação exigida pela ICP-Brasil</para>
        		</listitem>
        		<listitem> <para>invalidSignature </para> <para>valor booleano, que indica que Assinatura não está válida</para>
        		</listitem>
        		<listitem> <para>icpBrasilcertificate  </para> <para> BasicCertificate do Assinante</para>
        		</listitem>
        	</itemizedlist>
        	</para> 
        	Cabe ao sistema com base nos avisos ou erros, aceitar ou não a Assinatura. Qualquer tipo de Assinatura gerada com um certificado ICP-Brasil tem validade legal.
            A seguir temos um fragmento de código que demonstra esta validação.
        </para>
        <programlisting role="JAVA"><![CDATA[
        List<XMLSignatureInformations> results = new ArrayList<XMLSignatureInformations>();
        results = checker.getSignaturesInfo();
		if (!results.isEmpty()) {
				for (XMLSignatureInformations sis : results) {
					for (String valErr : sis.getValidatorErrors()) {
						System.err.println("++++++++++++++ ERROS ++++++++++++++++++");
						System.err.println(valErr);
					}

					for (String valWarn : sis.getValidatorWarnins()) {
						System.err.println("++++++++++++++ AVISOS ++++++++++++++++++");
						System.err.println(valWarn);
					}
					BasicCertificate bc = sis.getIcpBrasilcertificate();
					System.out.println(bc.toString());
					if (bc.hasCertificatePF()) {
						System.out.println(bc.getICPBRCertificatePF().getCPF());
					}
					if (bc.hasCertificatePJ()) {
						System.out.println(bc.getICPBRCertificatePJ().getCNPJ());
						System.out.println(bc.getICPBRCertificatePJ().getResponsibleCPF());
					}
				}
			}
]]></programlisting>

    </section>

</chapter>